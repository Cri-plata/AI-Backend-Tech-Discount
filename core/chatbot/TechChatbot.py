import os
import logging
from typing import List, Dict
from groq import Groq
from .EmbeddingManager import EmbeddingManager

logger = logging.getLogger(__name__)


class TechChatbot:
    """Chatbot especializado en buscar productos tecnol√≥gicos en descuento"""

    def __init__(self, groq_api_key: str = None):
        self.groq_api_key = groq_api_key or os.getenv("GROQ_API_KEY")
        self.embedding_manager = EmbeddingManager()
        self.conversation_history = []

        if not self.groq_api_key:
            logger.warning("‚ö†Ô∏è GROQ_API_KEY no encontrada. Usa environment variable o p√°sala al constructor.")
            self.client = None
        else:
            self.client = Groq(api_key=self.groq_api_key)

    def generate_response(self, user_input: str, product_info: List[Dict] = None) -> str:
        """Genera respuesta usando Groq SDK con contexto de productos VALIDADOS"""
        try:
            if not self.client:
                return self._fallback_response(user_input, product_info)

            # ‚úÖ VALIDACI√ìN CR√çTICA: Si no hay productos relevantes, forzar respuesta de "no encontrado"
            if not self._has_relevant_products(user_input, product_info):
                return self._no_products_response(user_input)

            # Construir el mensaje con contexto
            messages = self._build_messages(user_input, product_info)

            chat_completion = self.client.chat.completions.create(
                messages=messages,
                model="llama-3.3-70b-versatile",
                temperature=0.3,  # ‚úÖ Temperatura m√°s baja para reducir invenci√≥n
                max_tokens=800,  # ‚úÖ Aumentado para que quepan m√°s productos
                top_p=0.8
            )

            response = chat_completion.choices[0].message.content

            # ‚úÖ VALIDACI√ìN POST-RESPUESTA: Asegurar que solo menciona productos del contexto
            return self._validate_response(response, product_info)

        except Exception as e:
            logger.error(f"‚ùå Error con Groq API: {e}")
            return self._fallback_response(user_input, product_info)

    def _build_messages(self, user_input: str, product_info: List[Dict] = None) -> List[Dict]:
        """Construye los mensajes para la API de Groq"""

        available_stores = self._get_available_stores(product_info)
        stores_text = ", ".join(
            [store.capitalize() for store in available_stores]) if available_stores else "las tiendas disponibles"

        system_prompt = f"""Eres un asistente especializado en buscar productos tecnol√≥gicos en descuento. 
        Trabajas EXCLUSIVAMENTE con la informaci√≥n proporcionada en el contexto.

        REGLAS ABSOLUTAS (NO VIOLAR):
        1. SOLO menciona productos que est√©n en el contexto proporcionado
        2. SOLO menciona tiendas que est√©n en el contexto proporcionado  
        3. NUNCA inventes productos, precios, descuentos, especificaciones o tiendas
        4. Menciona los nombres de productos TAL CUAL aparecen en el contexto
        5. Incluye siempre la marca y modelo espec√≠fico del producto
        6. Los enlaces y disponibilidad deben ser EXACTAMENTE los del contexto
        7. SIEMPRE ofrece ayuda adicional al final de tu respuesta
        8. S√© proactivo y amigable, como un buen asistente

        INFORMACI√ìN DISPONIBLE ACTUALMENTE:
        - Tiendas: {stores_text}
        - Productos encontrados: {len(product_info) if product_info else 0}

        IMPORTANTE: 
        - Muestra los productos m√°s relevantes (hasta 5) 
        - Al final de cada respuesta, ofrece tu ayuda para seguir buscando o para m√°s detalles
        - S√© proactivo y ofrece ayuda para comparar, elegir o obtener m√°s informaci√≥n

        EJEMPLO CORRECTO:
        "üíª En Alkosto encontr√© 'Computador Port√°til Gamer HP Victus 15.6 Pulgadas Fb2024la AMD Ryzen 5' por $5,399,000. 
        ¬øTe gustar√≠a que te ayude a comparar modelos o necesitas m√°s informaci√≥n sobre este?"

        EJEMPLO INCORRECTO:
        "üíª En Alkosto encontr√© 'Computador Port√°til Gamer HP Victus 15.6 Pulgadas Fb2024la AMD Ryzen 5' por $5,399,000."
        """

        messages = [
            {"role": "system", "content": system_prompt}
        ]

        # Agregar historial de conversaci√≥n (√∫ltimos 3 mensajes)
        for msg in self.conversation_history[-6:]:  # 3 interacciones
            messages.append({
                "role": "user" if msg["type"] == "user" else "assistant",
                "content": msg["content"]
            })

        # Agregar contexto de productos si existe y es relevante
        if product_info and self._is_product_related_query(user_input):
            product_context = self._format_products_for_prompt(product_info)
            messages.append({
                "role": "system",
                "content": f"PRODUCTOS ENCONTRADOS EN TIENDAS:\n{product_context}\n\n"
                           f"IMPORTANTE: Menciona siempre la tienda de origen, destaca los descuentos, "
                           f"y al final ofrece ayuda para elegir o comparar productos."
            })

        # Agregar el mensaje actual del usuario
        messages.append({"role": "user", "content": user_input})

        return messages

    def _format_products_for_prompt(self, products: List[Dict]) -> str:
        """Formatea productos para el prompt de manera m√°s concisa"""
        if not products:
            return "No hay productos disponibles para esta b√∫squeda."

        formatted_products = []
        for i, product in enumerate(products[:5]):  # Hasta 5 productos
            store = product.get('source', 'alkosto').upper()

            # Formato m√°s conciso
            product_str = f"{store} - {product.get('name', 'Sin nombre')}"
            product_str += f" | ${product.get('price', 0):,.0f}"

            discount = product.get('discount_percent', '0%')
            if discount not in [None, '0%', '0']:
                product_str += f" ({discount} OFF)"

            formatted_products.append(product_str)

        return "PRODUCTOS DISPONIBLES:\n" + "\n".join(formatted_products)

    def _get_available_stores(self, product_info: List[Dict] = None) -> List[str]:
        """Obtiene las tiendas disponibles DIN√ÅMICAMENTE de la base de datos"""
        if not product_info:
            return []

        # Extraer tiendas √∫nicas de los productos encontrados
        stores = set()
        for product in product_info:
            store = product.get('source', '').lower()
            if store:
                stores.add(store)

        return list(stores)

    def _get_available_stores_info(self) -> str:
        """Obtiene informaci√≥n de las tiendas disponibles en la base de datos"""
        try:
            # Intentar obtener productos del √≠ndice
            if hasattr(self.embedding_manager, 'get_all_products_from_index'):
                all_products = self.embedding_manager.get_all_products_from_index()
            else:
                # Fallback: usar los productos del historial de b√∫squeda reciente
                all_products = []
                for msg in self.conversation_history:
                    if msg.get("products_found", 0) > 0:
                        # Aqu√≠ necesitar√≠as una manera de obtener los productos reales
                        pass
                return "Actualmente trabajo con varias tiendas de tecnolog√≠a. ¬øTe interesa buscar alg√∫n producto espec√≠fico?"

            if not all_products:
                return "Actualmente no tengo informaci√≥n de productos en mi base de datos."

            # Extraer tiendas √∫nicas
            stores = set()
            for product in all_products:
                store = product.get('source', '').strip().lower()
                if store:
                    stores.add(store)

            if not stores:
                return "Tengo productos de varias tiendas tecnol√≥gicas. ¬øQu√© producto est√°s buscando?"

            # Formatear respuesta
            store_list = [store.capitalize() for store in stores]
            store_list.sort()

            if len(store_list) == 1:
                return f"Actualmente tengo productos de {store_list[0]} en mi base de datos. ¬øTe interesa buscar algo espec√≠fico?"
            else:
                stores_text = ", ".join(store_list[:-1]) + f" y {store_list[-1]}"
                return f"Actualmente tengo productos de {stores_text} en mi base de datos. ¬øQu√© producto te interesa?"

        except Exception as e:
            logger.error(f"Error obteniendo tiendas disponibles: {e}")
            return "Tengo acceso a varias tiendas de tecnolog√≠a. ¬øEn qu√© producto te puedo ayudar a buscar?"

    def _is_store_related_query(self, user_input: str) -> bool:
        """Determina si la consulta es sobre tiendas disponibles"""
        input_lower = user_input.lower().strip()

        store_keywords = [
            'tiendas', 'tienda', 'store', 'stores', 'd√≥nde', 'donde',
            'qu√© tiendas', 'que tiendas', 'de qu√© tiendas', 'de que tiendas',
            'en qu√© tiendas', 'en que tiendas', 'qu√© almacenes', 'que almacenes',
            'd√≥nde buscar', 'donde buscar', 'qu√© empresas', 'que empresas',
            'qu√© marcas', 'que marcas', 'qu√© sitios', 'que sitios', 'd√≥nde comprar', 'donde comprar'
        ]

        # Consultas espec√≠ficas sobre tiendas
        specific_store_queries = [
            'de que tiendas', 'que tiendas', 'qu√© tiendas', 'tiendas tienes',
            'tiendas tiene', 'tiendas hay', 'tiendas disponibles', 'tiendas trabajas',
            'tiendas manejas', 'en qu√© almacenes', 'qu√© empresas'
        ]

        # Si contiene palabras clave espec√≠ficas de tiendas
        if any(keyword in input_lower for keyword in specific_store_queries):
            return True

        # Si es una consulta muy general que podr√≠a ser sobre tiendas
        general_store_indicators = ['tienda', 'store', 'almac√©n', 'empresa']
        if (any(word in input_lower for word in general_store_indicators) and
                len(input_lower.split()) <= 4):  # Consultas cortas
            return True

        return False

    def _validate_response(self, response: str, product_info: List[Dict] = None) -> str:
        """Valida que la respuesta solo mencione productos de la base de datos ACTUAL"""
        if not product_info:
            return self._no_products_response("")

        response_lower = response.lower()

        # Detectar si menciona palabras clave de productos
        is_talking_about_products = any(word in response_lower for word in [
            'encontr√©', 'encontre', 'producto', 'tenemos', 'ofertas', 'disponible', 'precio', 'victus', 'hp',
            'computador'
        ])

        # ‚úÖ Validaci√≥n M√ÅS INTELIGENTE: Buscar coincidencias parciales
        is_mentioning_real_products = False
        mentioned_products_count = 0

        for product in product_info:
            product_name = product.get('name', '').lower()
            brand = product.get('brand', '').lower()

            # ‚úÖ Coincidencia parcial: Si el nombre del producto est√° contenido en la respuesta
            # o si la respuesta contiene palabras clave del producto
            name_match = any(keyword in response_lower for keyword in product_name.split()[:5])  # Primeras 5 palabras
            brand_match = brand and brand in response_lower

            if name_match or brand_match:
                is_mentioning_real_products = True
                mentioned_products_count += 1
                logger.info(f"   ‚úÖ Coincidencia: {product_name[:50]}...")

        # ‚úÖ Validaci√≥n de tiendas
        is_mentioning_real_stores = False
        for product in product_info:
            store = product.get('source', '').lower()
            if store and store in response_lower:
                is_mentioning_real_stores = True
                break

        logger.info(f"   üìä Productos mencionados: {mentioned_products_count}/{len(product_info)}")
        logger.info(f"   üìä Habla de productos: {is_talking_about_products}")
        logger.info(f"   üìä Menciona productos reales: {is_mentioning_real_products}")
        logger.info(f"   üìä Menciona tiendas reales: {is_mentioning_real_stores}")

        # ‚úÖ L√≥gica de validaci√≥n mejorada
        if is_talking_about_products:
            if not is_mentioning_real_products:
                logger.warning("‚ö†Ô∏è Chatbot habla de productos pero no menciona los reales")
                return self._no_products_response("")

            if not is_mentioning_real_stores and any(word in response_lower for word in ['en ', 'de ', 'tienda']):
                logger.warning("‚ö†Ô∏è Chatbot habla de tiendas pero no menciona las reales")
                return self._no_products_response("")

        # ‚úÖ Si menciona al menos 1 producto real, la respuesta es v√°lida
        if mentioned_products_count > 0:
            logger.info("   ‚úÖ Respuesta validada correctamente")
            return response
        else:
            logger.warning("   ‚ö†Ô∏è No se detectaron productos reales en la respuesta")
            return self._no_products_response("")

    def _has_relevant_products(self, user_input: str, product_info: List[Dict] = None) -> bool:
        """Determina si los productos encontrados son realmente relevantes para la consulta"""
        if not product_info:
            return False

        # Umbral de similitud ajustado
        min_similarity = 0.45

        # Verificar relevancia sem√°ntica y contextual
        relevant_count = 0
        for product in product_info:
            similarity = product.get('similarity_score', 0)

            # Producto es relevante si tiene buena similitud
            if similarity >= min_similarity:
                relevant_count += 1

        logger.info(f"üìä Productos con similitud >= {min_similarity}: {relevant_count}/{len(product_info)}")

        # Tambi√©n considerar si la consulta es muy general vs productos encontrados
        if relevant_count == 0 and len(product_info) > 0:
            # Consulta muy general pero tenemos productos
            if len(user_input.split()) <= 2:  # Consultas cortas como "laptop", "celular"
                return True  # Mostrar resultados aunque similitud sea baja

        return relevant_count > 0

    def _no_products_response(self, user_input: str) -> str:
        """Respuesta cuando no hay productos relevantes en la base de datos"""

        # Respuesta especial para saludos
        if user_input.lower() in ['hola', 'hello', 'hi', 'buenos d√≠as', 'buenas tardes', 'buenas noches']:
            return "¬°Hola! üëã Soy tu asistente especializado en buscar productos tecnol√≥gicos en oferta. ¬øEn qu√© puedo ayudarte hoy? ¬øBuscas alg√∫n producto espec√≠fico?"

        suggestions = [
            "Intenta ser m√°s espec√≠fico con el modelo o caracter√≠sticas",
            "Prueba con otras palabras clave o marcas",
            "Revisa si hay errores de escritura en tu b√∫squeda",
            "¬øPodr√≠as darme m√°s detalles sobre lo que necesitas?"
        ]

        import random
        suggestion = random.choice(suggestions)

        if user_input:
            return f"üîç No encontr√© resultados para '{user_input}' en mi base de datos actual. {suggestion}"
        else:
            return f"üîç No encontr√© productos que coincidan con tu b√∫squeda. {suggestion}"

    def _is_product_related_query(self, user_input: str) -> bool:
        """Determina si la consulta est√° relacionada con productos de manera inteligente"""
        input_lower = user_input.lower().strip()

        # Palabras que indican claramente NO es b√∫squeda de productos (conversaci√≥n normal)
        conversation_phrases = [
            'hola', 'hello', 'hi', 'buenos d√≠as', 'buenas tardes', 'buenas noches',
            'qu√© tal', 'c√≥mo est√°s', 'c√≥mo te va', 'qu√© hay', 'qu√© onda',
            'gracias', 'thanks', 'thank you', 'adi√≥s', 'chao', 'bye',
            'saludos', 'ok', 'vale', 'entendido', 'de nada', 'perd√≥n', 'disculpa',
            'c√≥mo est√°s hoy', 'qu√© cuentas', 'c√≥mo ha estado', 'qu√© me cuentas'
        ]

        # 1. Si es EXACTAMENTE una frase de conversaci√≥n ‚Üí NO buscar productos
        if any(input_lower == phrase for phrase in conversation_phrases):
            return False

        # 2. Si contiene palabras de conversaci√≥n general (aunque tenga otras palabras)
        general_conversation_words = [
            'c√≥mo est√°s', 'qu√© tal', 'c√≥mo te va', 'gracias', 'hola', 'buenos d√≠as',
            'buenas tardes', 'buenas noches', 'adi√≥s', 'chao', 'bye'
        ]

        # Si contiene palabras de conversaci√≥n y es una frase corta
        if (any(phrase in input_lower for phrase in general_conversation_words) and
                len(input_lower.split()) <= 4):
            return False

        # 3. Si contiene palabras de intenci√≥n de b√∫squeda ‚Üí S√ç buscar
        search_intent_words = [
            'buscar', 'busco', 'encontrar', 'encuentra', 'quiero', 'necesito',
            'recomienda', 'muestra', 'mu√©strame', 'dime', 'ayuda', 'ay√∫dame',
            'producto', 'productos', 'oferta', 'ofertas', 'descuento', 'comprar',
            'laptop', 'celular', 'tablet', 'televisor', 'monitor', 'aud√≠fonos',
            'precio', 'cuesta', 'valor', 'cost√≥', 'disponible', 'tienes'
        ]

        if any(word in input_lower for word in search_intent_words):
            return True

        # 4. Si contiene nombres de categor√≠as/marcas comunes ‚Üí S√ç buscar
        tech_keywords = [
            'samsung', 'apple', 'iphone', 'lenovo', 'hp', 'dell', 'asus', 'acer',
            'port√°til', 'portatil', 'laptop', 'notebook', 'smartphone', 'celular',
            'tablet', 'ipad', 'tv', 'televisor', 'monitor', 'proyector', 'consola',
            'playstation', 'xbox', 'nintendo', 'aud√≠fonos', 'headphones', 'impresora'
        ]

        if any(keyword in input_lower for keyword in tech_keywords):
            return True

        # 5. Consultas muy cortas sin contexto ‚Üí NO buscar
        if len(input_lower.split()) <= 2 and not any(word in input_lower for word in tech_keywords):
            return False

        # 6. Default: buscar por si acaso
        return True

    def _calculate_dynamic_threshold(self, user_input: str) -> float:
        """Calcula threshold din√°mico basado en la consulta"""
        input_lower = user_input.lower()

        # Consultas que mezclan saludo + b√∫squeda ‚Üí threshold medio
        mixed_phrases = [
            'hola me podr√≠as ayudar', 'buenos d√≠as quiero', 'hola busco',
            'hola necesito', 'hola quiero', 'buenas tardes me recomiendas'
        ]

        if any(phrase in input_lower for phrase in mixed_phrases):
            return 0.4  # Threshold medio para consultas mixtas

        # Consultas t√©cnicas espec√≠ficas ‚Üí threshold bajo
        tech_specific = ['ram', 'procesador', 'almacenamiento', 'pantalla',
                         'gb', 'tb', 'intel', 'amd', 'ryzen', 'core', 'nvidia']
        if any(word in input_lower for word in tech_specific):
            return 0.35

        # Consultas generales de producto ‚Üí threshold medio
        return 0.45

    def _fallback_response(self, user_input: str, product_info: List[Dict] = None) -> str:
        """Respuesta de fallback si la API falla"""
        if product_info and self._is_product_related_query(user_input):
            product = product_info[0]
            store = product.get('source', 'alkosto').upper()
            return (
                f"En {store} encontr√© {product.get('name', 'un producto')} "
                f"de {product.get('brand', 'marca reconocida')} por ${product.get('price', 0):,.0f}. "
                f"¬øTe interesa que busque m√°s detalles?"
            )
        else:
            return "¬°Hola! üëã Soy tu buscador de ofertas tech. ¬øQu√© producto necesitas encontrar?"

    def chat(self, user_input: str) -> str:
        """Flujo completo de chat con embeddings + Groq"""
        try:
            logger.info(f"üë§ Usuario: {user_input}")

            # 1. ‚úÖ PRIMERO: Verificar si es consulta sobre tiendas
            if self._is_store_related_query(user_input):
                store_info = self._get_available_stores_info()
                response = f"üè™ {store_info} ¬øTe interesa buscar alg√∫n producto en particular?"

                # Guardar en historial
                self.conversation_history.append({
                    "type": "user",
                    "content": user_input,
                    "products_found": 0
                })
                self.conversation_history.append({
                    "type": "assistant",
                    "content": response
                })

                logger.info(f"ü§ñ Asistente: {response}")
                return response

            # 2. Determinar si buscar productos
            products = []
            should_search = self._is_product_related_query(user_input)

            if should_search:
                threshold = self._calculate_dynamic_threshold(user_input)
                products = self.embedding_manager.search_products(
                    user_input,
                    top_k=5,
                    threshold=0.3
                )

                # Filtrar por relevancia
                products = [p for p in products if p.get('similarity_score', 0) >= 0.4]
                logger.info(f"üîç Productos despu√©s de filtrado: {len(products)}")

                for i, product in enumerate(products):
                    logger.info(
                        f"   {i + 1}. {product.get('name')} - Score: {product.get('similarity_score', 0):.3f} - Tienda: {product.get('source')}")

            # 3. Generar respuesta apropiada
            if not should_search:
                # Es conversaci√≥n normal, usar Groq para respuesta natural
                response = self._generate_conversational_response(user_input)
            elif not self._has_relevant_products(user_input, products):
                # B√∫squeda sin resultados relevantes
                response = self._no_products_response(user_input)
            else:
                # B√∫squeda con resultados, generar respuesta con productos
                response = self.generate_response(user_input, products)

            # 4. Guardar en historial
            self.conversation_history.append({
                "type": "user",
                "content": user_input,
                "products_found": len(products) if should_search else 0
            })
            self.conversation_history.append({
                "type": "assistant",
                "content": response
            })

            # Limitar historial para no exceder contexto
            self.conversation_history = self.conversation_history[-10:]

            logger.info(f"ü§ñ Asistente: {response}")
            return response

        except Exception as e:
            logger.error(f"‚ùå Error en chat: {e}")
            return "¬°Disculpa! Estoy teniendo problemas t√©cnicos. ¬øPodr√≠as intentarlo de nuevo?"

    def clear_history(self):
        """Limpia el historial de conversaci√≥n"""
        self.conversation_history = []

    def get_chat_stats(self) -> Dict:
        """Estad√≠sticas de la conversaci√≥n"""
        return {
            "total_messages": len(self.conversation_history),
            "user_messages": sum(1 for msg in self.conversation_history if msg["type"] == "user"),
            "assistant_messages": sum(1 for msg in self.conversation_history if msg["type"] == "assistant"),
            "last_products_found": self.conversation_history[-2]["products_found"] if len(
                self.conversation_history) >= 2 else 0
        }

    def _generate_conversational_response(self, user_input: str) -> str:
        """Genera respuestas para conversaci√≥n normal (no b√∫squeda de productos)"""
        try:
            if not self.client:
                return "¬°Hola! üëã ¬øEn qu√© puedo ayudarte hoy?"

            messages = [
                {"role": "system", "content": """Eres un asistente amigable y conversacional especializado en productos tecnol√≥gicos. 
                Responde de manera natural y cordial a saludos y conversaci√≥n general.
                Mant√©n tus respuestas breves y amigables.
                Si es apropiado, pregunta si la persona necesita ayuda con productos tecnol√≥gicos."""},
                {"role": "user", "content": user_input}
            ]

            chat_completion = self.client.chat.completions.create(
                messages=messages,
                model="llama-3.3-70b-versatile",
                temperature=0.7,
                max_tokens=150,
                top_p=0.9
            )

            return chat_completion.choices[0].message.content

        except Exception as e:
            logger.error(f"Error en respuesta conversacional: {e}")
            return "¬°Hola! üëã ¬øEn qu√© puedo ayudarte hoy?"

    def quick_test(self, test_query: str = "hola") -> str:
        """Prueba r√°pida del chatbot"""
        try:
            return self.chat(test_query)
        except Exception as e:
            return f"Error en prueba: {e}"